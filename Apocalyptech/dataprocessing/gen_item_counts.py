#!/usr/bin/env python
# vim: set expandtab tabstop=4 shiftwidth=4:

# Copyright 2019-2020 Christopher J. Kucera
# <cj@apocalyptech.com>
# <http://apocalyptech.com/contact.php>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import re
import sys
import csv
import platform
import itertools
from wldata.wldata import WLData
from wlhotfixmod.wlhotfixmod import Balance

print("Not actually tested fully!  Armor balances are absurd, and I haven't cared")
print("enough to omit those (or figure out a more efficient way of doing it) and")
print("check the rest, yet.")
sys.exit(1)

# Data generated by this script lives online at:
# ...

if 'cpython' in platform.python_implementation().lower():
    print("")
    print("This app is slow and inefficient.  PyPy3 won't help with the")
    print("inefficiency, but it *will* improve runtimes considerably, by")
    print("something like 6x.  It's recommended to quit now and re-launch")
    print("with PyPy3.")
    print("")
    print("Hit Enter to continue anyway, but don't expect anything fast.")
    print("")
    sys.stdout.write("Ctrl-C to exit, Enter to continue> ")
    sys.stdout.flush()
    sys.stdin.readline()

data = WLData()

part_cache = {}

class PartTreeNode(object):
    """
    A node in a Part tree.  Using some legacy terminology here; "apls" used to refer
    to the PartSet ActorPartLists structure, but we're using our Balance objects
    instead.
    """

    def __init__(self, data, parent, part_set, apls, level=0):
        self.data = data
        self.parent = parent
        self.part_set = part_set
        self.apls = apls
        self.level = level
        self.children = []
        self.leaf_count = 0

        # Debug, pff.
        #print('{}{}'.format('  '*level, part_set))

        found_parts = False
        while not found_parts:
            if len(self.apls) == 0:
                break
            self.apl = self.apls[0]
            if len(self.apl.partlist) == 0:
                self.apls = self.apls[1:]
            else:
                found_parts = True

        if not found_parts:
            self.leaf_count = 1 
            return

        # Loop through parts to find out which ones actually apply here.
        parts = []
        for part in self.apl.partlist:
            part_name = part.part_name
            if part_name == 'None':
                parts.append(None)
            else:
                (excluders, dependencies) = self._get_constraints(part_name)

                # Process exclusions
                if len(excluders) > 0:
                    excluded = False
                    for excl in excluders:
                        if self._has_part(excl):
                            #print('Excluded {} because of {}'.format(part_name, excl))
                            excluded = True
                            break
                    if excluded:
                        continue

                # Process dependencies
                if len(dependencies) > 0:
                    has_dep = False
                    for dep in dependencies:
                        if self._has_part(dep):
                            has_dep = True
                            break
                    if not has_dep:
                        #print('Dependency fail for {}: {} ({})'.format(part_name, dependencies, self.part_set))
                        continue

                # If we got here, it's a valid part.
                parts.append(part_name)

        # Okay, now we've got a sanitized part list, put together a list of children
        possibilities = []
        if self.apl.select_multiple:
            # We're assuming that anything with weighted parts does NOT have
            # zero-weight parts.  TODO: maybe check that, later?
            for mult in range(self.apl.num_min, self.apl.num_max+1):
                if mult == 0:
                    possibilities.append(set())
                else:
                    possibilities.extend([set(c) for c in itertools.combinations(parts, mult)])
        else:
            possibilities.extend([set([p]) for p in parts])

        # Now loop through the possibilities. Note that in some cases we might not have
        # any parts which can be valid here, so be sure to recurse down with an empty
        # set.
        if len(possibilities) > 0:
            for possibility in possibilities:
                self.children.append(PartTreeNode(self.data, self, possibility, self.apls[1:], self.level+1))
        else:
            self.children.append(PartTreeNode(self.data, self, set(), self.apls[1:], self.level+1))

        # Update our leaf count as we go.
        self.leaf_count += sum([child.leaf_count for child in self.children])

        # Memory efficiency!  Hah.  Right.  Anyway, we never recurse back into
        # these things once they're created, so why not just get rid of 'em?
        # Honestly we probably shouldn't even bother setting up a children array
        # in the first place.  I'll leave it in anyway; if we comment this, we'd
        # be able to poke through the tree if we wanted, for some reason.
        self.children = None

    def _get_constraints(self, part_name):

        # Breaking OOO here, ah well.
        global part_cache

        if part_name not in part_cache:

            excluders = set()
            dependencies = set()

            part_data = self.data.get_data(part_name)
            found_export = False
            for export in part_data:
                if export['export_type'].startswith('BPInvPart_'):
                    found_export = True
                    if 'Excluders' in export:
                        for excluder in export['Excluders']:
                            if 'export' in excluder:
                                # WTF is going on here?  So far, these objects seem to just reference *themselves* in here.
                                # Been ignoring a bunch of these on the BL3 side too, so whatever, do that here as well.
                                if part_name not in {
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Part_M_Sword_HiltMod_01',
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Part_M_Sword_HiltMod_02',
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Part_M_Sword_HiltMod_03',
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Part_M_Sword_HiltMod_04',
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Part_M_Sword_HiltMod_05',
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Part_M_Sword_HiltMod_06',
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Part_M_Sword_HiltMod_07',
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Part_M_Sword_HiltMod_08',
                                        '/Game/Gear/Melee/Swords/_Shared/_Design/Parts/Hilt_Mod/Hilt_Mod_Mission/Part_M_Sword_HiltMod_07_Mission',
                                        '/Game/Gear/Shields/_Design/PartSets/Part_Augment/Safespace/Part_Shield_Aug_Knockback',
                                        }:
                                    # Also, literally 211 Pauldron-related parts do this.  Whatever, ignore the lot.
                                    if not part_name.startswith('/Game/Gear/Pauldrons/_Shared/_Design'):
                                        print('WARNING: {} Excluders references itself?'.format(part_name))
                            else:
                                excluders.add(excluder[1])
                    if 'Dependencies' in export:
                        for dependency in export['Dependencies']:
                            dependencies.add(dependency[1])
                    break

            if not found_export:
                raise Exception('Could not find export for {}'.format(part_name))

            part_cache[part_name] = (excluders, dependencies)

        return part_cache[part_name]

    def _has_part(self, part_name):
        if part_name in self.part_set:
            return True
        if self.parent is not None:
            return self.parent._has_part(part_name)
        return False

    def count_leaves(self):
        """
        Manually count leaves; shouldn't be necessary to do this since we
        update as we go.
        """
        if len(self.children) == 0:
            return 1
        else:
            return sum([child.count_leaves() for child in self.children])

class BalanceTree(object):
    """
    A wrapper around the "stock" Balance object to do our recursive tree nonsense.
    """

    def __init__(self, bal_name, data):
        self.bal_name = bal_name
        self.data = data

        # Load ourselves
        self.bal = Balance.from_data(data, bal_name)

        # Start processing our part tree
        self.tree = PartTreeNode(self.data, None, set(), self.bal.categories)

    def gun_count(self, anointment_additions=None, anointment_exclusions=set()):
        """
        Counts the leaves of our tree
        """
        if anointment_additions \
                and 'RuntimeGenericPartList' in self.bal.raw_bal_data \
                and 'bEnabled' in self.bal.raw_bal_data['RuntimeGenericPartList'] \
                and self.bal.raw_bal_data['RuntimeGenericPartList']['bEnabled'] \
                and 'PartList' in self.bal.raw_bal_data['RuntimeGenericPartList'] \
                and len(self.bal.raw_bal_data['RuntimeGenericPartList']['PartList']) > 0:
            if self.bal_name in anointment_additions:
                addition = anointment_additions[self.bal_name]
            else:
                addition = 0
            # Since GBX disabled spawns for a bunch of anointments with the 2020-07-23
            # update, we can't just take a raw count of the built-in anointments
            anoint_count = 0
            for part in self.bal.raw_bal_data['RuntimeGenericPartList']['PartList']:
                if 'export' in part['PartData'] or part['PartData'][1] not in anointment_exclusions:
                    anoint_count += 1
            return self.tree.leaf_count * (anoint_count + addition)
        else:
            return self.tree.leaf_count

# Balances to loop through
gun_balances = []

# Some text massaging
transforms = {
        'sniperrifles': 'Sniper Rifles',
        'assaultrifles': 'ARs',
        'assaultrifle': 'ARs',
        'shotgun': 'Shotguns',
        'pistol': 'Pistols',
        'heavyweapons': 'Heavy Weapons',
        'hw': 'Heavy Weapons',
        'sword2h': 'Sword (2H)',

        'jakobs': 'Blackpowder',
        
        'dahl': 'Dahlia',

        'hyperion': 'Hyperius',

        'childrenofthevault': 'Skuldugger',
        'cov': 'Skuldugger',

        'tediore': 'Feriore',
        'ted': 'Feriore',

        'vladof': 'Stoker',
        'vla': 'Stoker',

        'tor': 'Torgue',

        'anshin': 'Ashen',

        'pangolin': 'Pangoblin',
        }

# "Regular" guns
gun_balances = []
for glob_pattern, re_pattern in [
        ('/Game/Gear/Weapons/*/*/*Shared/_Design/*Balance*/Balance_*',
            r'^/Game/Gear/Weapons/(?P<guntype>.*?)/(?P<manufacturer>.*?)/.*',
            ),
        ]:

    pat = re.compile(re_pattern)
    for obj_name in data.glob(glob_pattern):

        # Strip out some info from the object name
        suffix = None
        match = pat.match(obj_name).groupdict()
        if 'rarity_suffix' in match:
            rarity_suffix = match['rarity_suffix']

            lower = obj_name.lower()
            if 'veryrare' in lower:
                rarity = '04/Very Rare'
            elif 'rare' in lower:
                rarity = '03/Rare'
            else:
                raise Exception('Unknown rarity in {}'.format(obj_name))

            rarity = '{} {}'.format(rarity, transforms.get(rarity_suffix.lower(), rarity_suffix))
        else:
            lower = obj_name.lower()
            if 'uncommon' in lower:
                rarity = '02/Uncommon'
            elif 'common' in lower:
                rarity = '01/Common'
            elif 'veryrare' in lower:
                rarity = '04/Very Rare'
            elif 'rare' in lower:
                rarity = '03/Rare'
            elif 'firstgun' in lower:
                rarity = '01/Common (Starting Gear)'
            else:
                raise Exception('Unknown rarity in {}'.format(obj_name))

        # Now add it to our list
        gun_balances.append((
            transforms.get(match['manufacturer'].lower(), match['manufacturer']),
            transforms.get(match['guntype'].lower(), match['guntype']),
            rarity,
            obj_name,
            ))
gun_balances.sort()
for (label, balance_name) in [
        ("Anchor", '/Game/Gear/Weapons/HeavyWeapons/Torgue/_Shared/_Design/_Unique/Anchor/Balance/Balance_HW_TOR_Anchor'),
        ("Antique Greatbow", '/Game/Gear/Weapons/SniperRifles/Hyperion/_Shared/_Design/_Unique/AntGreatBow/Balance/Balance_SR_HYP_05_AntGreatBow'),
        ("Apex", '/Game/Gear/Weapons/Pistols/Dahl/_Shared/_Design/_Unique/Apex/Balance/Balance_DAL_PS_05_Apex'),
        ("AUTOMAGIC.exe", '/Game/Gear/Weapons/Pistols/Vladof/_Shared/_Design/_Unique/AUTOMAGICEXE/Balance/Balance_PS_VLA_05_AUTOMAGICEXE'),
        ("Birthright", '/Game/Gear/Weapons/Pistols/Vladof/_Shared/_Design/_Unique/Birthright/Balance/Balance_PS_VLA_Birthright'),
        ("Blazing Volley", '/Game/Gear/Weapons/SMGs/Hyperion/_Shared/_Design/_Unique/BlazingVolley/Balance/Balance_SM_HYP_05_BlazingVolley'),
        ("Blue Cake", '/Game/Gear/Weapons/HeavyWeapons/ChildrenOfTheVault/_Shared/_Design/_Unique/BlueCake/Balance/Balance_HW_COV_05_BlueCake'),
        ("Boniface's Soul", '/Game/Gear/Weapons/Pistols/Tediore/Shared/_Design/_Unique/TheHost/Balance/Balance_PS_Tediore_05_TheHost'),
        ("Borea's Breath", '/Game/Gear/Weapons/SMGs/Tediore/_Shared/_Design/_Unique/BoreasBreath/Balance/Balance_SM_TED_BoreasBreath'),
        ("Butterboom", '/Game/PatchDLC/Indigo2/Gear/Weapons/Pistols/Torgue/_Shared/_Design/_Unique/Butterboom/Balance/Balance_PS_TOR_05_Butterbm'),
        ("Cannonballer", '/Game/Gear/Weapons/HeavyWeapons/Torgue/_Shared/_Design/_Unique/Cannonballer/Balance/Balance_HW_TOR_05_Cannonballer'),
        ("Carrouser", '/Game/Gear/Weapons/SniperRifles/Jakobs/_Shared/_Design/_Unique/Carrouser/Balance/Balance_SR_JAK_05_Carrouser'),
        ("Catatumbo", '/Game/Gear/Weapons/Pistols/Jakobs/_Shared/_Design/_Unique/Catatumbo/Balance/Balance_PS_JAK_05_Catatumbo'),
        ("Circuitous Gyre", '/Game/Gear/Weapons/Shotguns/Hyperion/_Shared/_Design/_Unique/CircGyre/Balance/Balance_SG_HYP_05_CircGuire'),
        ("Crossblade", '/Game/Gear/Weapons/Shotguns/Jakobs/_Shared/_Design/_Unique/CrossBlade/Balance/Balance_SG_JAK_05_Crossblade'),
        ("Crossbolt Generator", '/Game/Gear/Weapons/AssaultRifles/Jakobs/_Shared/_Design/_Unique/CrossGen/Balance/Balance_AR_JAK_05_CrossGen'),
        ("Die-Vergent", '/Game/PatchDLC/Indigo1/Gear/Weapons/Shotguns/Tediore/_Shared/_Design/_Unique/DieVergent/Balance/Balance_SG_TED_DieVergent'),
        ("Donkey", '/Game/Gear/Weapons/AssaultRifles/Vladof/_Shared/_Design/_Unique/Donkey/Balance/Balance_AR_VLA_Donkey'),
        ("Dreadlord's Finest", '/Game/Gear/Weapons/AssaultRifles/Vladof/_Shared/_Design/_Unique/DreadLord/Balance/Balance_AR_VLA_Dreadlord'),
        ("Dry'l's Fury", '/Game/Gear/Weapons/SniperRifles/Vladof/_Shared/_Design/_Unique/DrylsFury/Balance/Balance_VLA_SR_05_DrylsFury'),
        ("Dry'l's Legacy", '/Game/Gear/Weapons/SMGs/Hyperion/_Shared/_Design/_Unique/DrylsLegacy/Balance/Balance_SM_HYP_05_DrylsLegacy'),
        ("Echoing Phoenix", '/Game/PatchDLC/Indigo3/Gear/Weapons/AssualtRifles/Jakobs/_Shared/_Design/_Unique/EchoPhoenix/Balance/Bal_AR_JAK_EchoPhnix'),
        ("Eight Piece", '/Game/Gear/Weapons/AssaultRifles/ChildrenOfTheVault/_Shared/_Design/_Unique/PiratesLife/Balance/Balance_AR_COV_Pirates'),
        ("Envy", '/Game/Gear/Weapons/SniperRifles/Jakobs/_Shared/_Design/_Unique/Envy/Balance/Balance_SR_JAK_05_Envy'),
        ("Fragment Rain", '/Game/Gear/Weapons/SMGs/Tediore/_Shared/_Design/_Unique/FragmentRain/Balance/Balance_SM_TED_05_FragmentRain'),
        ("Gluttony", '/Game/Gear/Weapons/Pistols/Tediore/Shared/_Design/_Unique/Gluttony/Balance/Balance_PS_Tediore_05_Gluttony'),
        ("Goblin Repellant", '/Game/Gear/Weapons/Pistols/ChildrenOfTheVault/_Shared/_Design/_Unique/Repellant/Balance/Balance_PS_COV_05_Repellant'),
        ("Hawkins' Wrath", '/Game/Gear/Weapons/Shotguns/Torgue/_Shared/_Design/_Unique/HawkinsWrath/Balance/Balance_SG_Torgue_05_HawkinsWrath'),
        ("Headcanon", '/Game/Gear/Weapons/Pistols/Torgue/_Shared/_Design/_Unique/Headcannon/Balance/Balance_PS_TOR_05_Headcannon'),
        ("Heckwader", '/Game/Gear/Weapons/SMGs/Dahl/_Shared/_Design/_Unique/Heckwader/Balance/Balance_SM_DAL_Heckwader'),
        ("Ironsides", '/Game/Gear/Weapons/SniperRifles/Jakobs/_Shared/_Design/_Unique/IronSides/Balance/Balance_SR_JAK_05_IronSides'),
        ("Kao Khan", '/Game/Gear/Weapons/SniperRifles/Hyperion/_Shared/_Design/_Unique/KaoKhan/Balance/Balance_SR_HYP_KaoKhan'),
        ("Last Rites", '/Game/Gear/Weapons/Shotguns/Hyperion/_Shared/_Design/_Unique/LastRites/Balance/Balance_SG_HYP_05_LastRites'),
        ("Lil K's Bread Slicer", '/Game/Gear/Weapons/AssaultRifles/Vladof/_Shared/_Design/_Unique/BreadSlicer/Balance/Balance_AR_VLA_05_BreadSlicer'),
        ("Liquid Cooling", '/Game/Gear/Weapons/Pistols/ChildrenOfTheVault/_Shared/_Design/_Unique/LiquidCooling/Balance/Balance_PS_COV_05_LiquidCoolin'),
        ("Live Wire", '/Game/Gear/Weapons/SMGs/Dahl/_Shared/_Design/_Unique/LiveWire/Balance/Balance_SM_DAHL_05_LiveWire'),
        ("Love Leopard", '/Game/Gear/Weapons/HeavyWeapons/ChildrenOfTheVault/_Shared/_Design/_Unique/LovePanther/Balance/Balance_HW_COV_05_LovePanther'),
        ("Manual Transmission", '/Game/Gear/Weapons/AssaultRifles/Vladof/_Shared/_Design/_Unique/ManualTransmission/Balance/Balance_AR_VLA_ManualTrans'),
        ("Masterwork Handbow", '/Game/Gear/Weapons/Pistols/Jakobs/_Shared/_Design/_Unique/MasterworkCrossbow/Balance/Balance_PS_JAK_MasterworkCrossbow'),
        ("Message", '/Game/Gear/Weapons/Pistols/Torgue/_Shared/_Design/_Unique/Message/Balance/Balance_PS_TOR_05_Message'),
        ("Mistrial", '/Game/Gear/Weapons/AssaultRifles/Dahl/_Shared/_Design/_Unique/Mistrial/Balance/Balance_DAL_AR_Mistrial'),
        ("Moleman", '/Game/Gear/Weapons/HeavyWeapons/Vladof/_Shared/_Design/_Unique/Moleman/Balance/Balance_HW_VLA_04_Moleman'),
        ("Negotiator", '/Game/Gear/Weapons/Shotguns/Torgue/_Shared/_Design/_Unique/Diplomacy/Balance/Balance_SG_Torgue_05_Diplomacy'),
        ("Oil and Spice", '/Game/PatchDLC/Indigo2/Gear/Weapons/SMGs/Dahl/OilNSpice/Balance/Balance_SM_DAHL_OilNSpice'),
        ("Perceiver", '/Game/Gear/Weapons/Pistols/Dahl/_Shared/_Design/_Unique/Perceiver/Balance/Balance_DAL_PS_05_Perceiver'),
        ("Pookie's Chew Toy", '/Game/Gear/Weapons/Pistols/Jakobs/_Shared/_Design/_Unique/Pookie/Balance/Balance_PS_JAK_05_Pookie'),
        ("Portable Sawmill", '/Game/Gear/Weapons/SniperRifles/Vladof/_Shared/_Design/_Unique/PortableSawmill/Balance/Balance_VLA_SR_05_PortableSawmill'),
        ("Quad Bow", '/Game/Gear/Weapons/AssaultRifles/Dahl/_Shared/_Design/_Unique/QuadBow/Balance/Balance_DAL_AR_Quadbow'),
        ("Queen's Cry", '/Game/Gear/Weapons/Pistols/Vladof/_Shared/_Design/_Unique/QueensCry/Balance/Balance_PS_VLA_QueensCry'),
        ("Red Hellion", '/Game/Gear/Weapons/Shotguns/Hyperion/_Shared/_Design/_Unique/RedHellion/Balance/Balance_SG_HYP_05_RedHellion'),
        ("Reign of Arrows", '/Game/Gear/Weapons/Shotguns/Jakobs/_Shared/_Design/_Unique/ReignOfArrows/Balance/Balance_SG_JAK_05_ReignOfArrows'),
        ("Rogue Imp", '/Game/Gear/Weapons/AssaultRifles/ChildrenOfTheVault/_Shared/_Design/_Unique/RogueImp/Balance/Balance_AR_COV_05_RogueImp'),
        ("Ruby's Spite", '/Game/Gear/Weapons/Pistols/Dahl/_Shared/_Design/_Unique/RoisensSpite/Balance/Balance_DAL_PS_RoisensSpite'),
        ("Shadowfire", '/Game/Gear/Weapons/SMGs/Tediore/_Shared/_Design/_Unique/Shadowfire/Balance/Balance_SM_TED_05_Shadowfire'),
        ("Skeep Prod", '/Game/Gear/Weapons/SniperRifles/Dahl/_Shared/_Design/_Unique/SkeepProd/Balance/Balance_SR_DAL_05_SkeepProd'),
        ("Stab-O-Matic", '/Game/PatchDLC/Indigo3/Gear/Weapons/Shotgun/Hyperion/_Shared/_Design/_Unique/FaceStabber/Balance/Balance_SG_HYP_FacePunch'),
        ("Sworderang", '/Game/Gear/Weapons/Shotguns/Tediore/_Shared/_Design/_Unique/Sworderang/Balance/Balance_SG_Tediore_05_Sworderang'),
        ("Swordruption", '/Game/Gear/Weapons/Shotguns/Torgue/_Shared/_Design/_Unique/Swordruption/Balance/Balance_SG_Torgue_Swordruption'),
        ("Swordsplosion", '/Game/Gear/Weapons/Shotguns/Torgue/_Shared/_Design/_Unique/Swordsplosion/Balance/Balance_SG_Torgue_05_Swordsplosion'),
        ("Throwable Hole", '/Game/Gear/Weapons/SMGs/Tediore/_Shared/_Design/_Unique/ThrowableHole/Balance/Balance_SM_TED_05_ThrowableHole'),
        ("Thumbsbane (intro mission)", '/Game/Gear/Weapons/Pistols/Dahl/_Shared/_Design/_Unique/IntroMission/Balance/Balance_DAL_PS_FirstGun'),
        ("Thunder Anima", '/Game/Gear/Weapons/AssaultRifles/ChildrenOfTheVault/_Shared/_Design/_Unique/ThunderAnima/Balance/Balance_AR_COV_ThunderAni'),
        ("Tootherator", '/Game/Gear/Weapons/SniperRifles/Hyperion/_Shared/_Design/_Unique/Tootherator/Balance/Balance_SR_HYP_03_Tootherator'),
        ("Twisted Delugeon", '/Game/PatchDLC/Indigo1/Gear/Weapons/HeavyWeapons/Valdof/_Shared/_Design/_Unique/TwistDeluge/Balance/Bal_VLA_TwistDeluge'),
        ("Used Antique Greatbow", '/Game/Gear/Weapons/SniperRifles/Hyperion/_Shared/_Design/_Unique/AntGreatBow/Balance/Balance_SR_HYP_05_AntGreatBow_Used'),
        ("White Rider", '/Game/Gear/Weapons/SMGs/Dahl/_Shared/_Design/_Unique/WhiteRider/Balance/Balance_SM_DAHL_05_WhiteRider'),
        ("Wizard's Pipe", '/Game/Gear/Weapons/SMGs/Hyperion/_Shared/_Design/_Unique/WizardPipe/Balance/Balance_SM_HYP_05_WizardsPipe'),
        ]:
    gun_balances.append((
        label,
        '',
        'Named Weapon',
        balance_name,
        ))

# Melee weapons
melee_balances = []
for glob_pattern, re_pattern in [
        ('/Game/Gear/Melee/_Shared/_Design/Balance/Balance_M_*',
            r'^/Game/Gear/Melee/_Shared/_Design/Balance/Balance_M_(?P<meleetype>.*?)_(?P<rarity>\d+_.*?)$',
            ),
        ]:

    pat = re.compile(re_pattern)
    for obj_name in data.glob(glob_pattern):

        match = pat.match(obj_name).groupdict()
        rarity_lower = match['rarity'].lower()
        if rarity_lower == '01_common':
            rarity = '01/Common'
        elif rarity_lower == '02_uncommon':
            rarity = '02/Uncommon'
        elif rarity_lower == '03_rare':
            rarity = '03/Rare'
        elif rarity_lower == '04_veryrare':
            rarity = '04/Very Rare'
        else:
            raise Exception('Unknown rarity in {}, {}'.format(obj_name, rarity_lower))

        # Now add it to our list
        melee_balances.append((
            'Generic',
            transforms.get(match['meleetype'].lower(), match['meleetype']),
            rarity,
            obj_name,
            ))
melee_balances.sort()
for (label, balance_name, melee_type) in [
        ("Banshee Claw", '/Game/Gear/Melee/Swords_2H/_Shared/_Design/_Unique/BansheeClaw/Balance_M_Sword2H_BansheeClaw', 'Sword2H'),
        ("Body Spray", '/Game/Gear/Melee/Axes/_Shared/_Design/_Unique/BodySpray/Balance/Balance_M_Axe_BodySpray', 'Axe'),
        ("Broadsword (intro mission)", '/Game/Gear/Melee/Swords/_Shared/_Design/_Unique/IntroMission/Balance/Balance_M_Sword_IntroMission', 'Sword'),
        ("Diamondguard Sword", '/Game/Gear/Melee/Swords/_Shared/_Design/_Unique/DiamondGuard/Balance_M_Sword_DiamondGuard', 'Sword'),
        ("Fatebreaker", '/Game/Gear/Melee/Swords_2H/_Shared/_Design/_Unique/Dragonlord/Balance_M_Sword2H_Dragonlord', 'Sword2H'),
        ("Frostbite", '/Game/Gear/Melee/Axes/_Shared/_Design/_Unique/SmithCharade/Balance/Balance_M_Axe_SmithCharade_Reward', 'Axe'),
        ("Frying Pan", '/Game/Gear/Melee/Blunts/_Shared/_Design/_Unique/FryingPan/Balance_M_Blunt_FryingPan', 'Blunt'),
        ("Goblin Pickaxe", '/Game/Gear/Melee/Axes/_Shared/_Design/_Unique/MiningPick/Balance_M_Axe_MiningPick', 'Axe'),
        ("Goblin's Bane", '/Game/Gear/Melee/Swords/_Shared/_Design/_Unique/GoblinsBane/Balance/Balance_M_Sword_GoblinsBane', 'Sword'),
        ("Greed Warden", '/Game/PatchDLC/Indigo3/Gear/Melee/_Shared/_Unique/ShieldBash/Balance_M_ShieldBash', 'Blunt'),
        ("Hatchet", '/Game/Gear/Melee/Axes/_Shared/_Design/_Unique/FirstMelee/Balance_M_Axe_FirstMelee', 'Axe'),
        ("LeChance's Last Leg", '/Game/Gear/Melee/Blunts/_Shared/_Design/_Unique/LeChancesLastLeg/Balance_M_Blunt_LeChancesLastLeg', 'Blunt'),
        ("Mage Staff", '/Game/Gear/Melee/Swords_2H/_Shared/_Design/_Unique/MageStaff/Balance_M_Sword2H_MageStaff', 'Sword2H'),
        ("Metal Lute", '/Game/Gear/Melee/Blunts/_Shared/_Design/_Unique/Minstrel/Balance/Balance_M_Blunt_Minstrel', 'Blunt'),
        ("Paladin's Sword", '/Game/Gear/Melee/Swords_2H/_Shared/_Design/_Unique/PaladinSword/Balance/Balance_M_Sword2H_PaladinSword', 'Sword2H'),
        ("Peg Leg", '/Game/Gear/Melee/Blunts/_Shared/_Design/_Unique/PegLeg/Balance_M_Blunt_PegLeg', 'Blunt'),
        ("Petty Tantrum", '/Game/PatchDLC/Indigo3/Gear/Melee/_Shared/_Unique/HammerQuake/Balance_M_HammerQuake', 'Blunt'),
        ("Pincushion", '/Game/Gear/Melee/Blunts/_Shared/_Design/_Unique/Pincushion/Balance_M_Blunt_Pincushion', 'Blunt'),
        ("Ragnarok", '/Game/Gear/Melee/Swords/_Shared/_Design/_Unique/Ragnarok/Balance_M_Sword_Ragnarok', 'Sword'),
        ("Salt and Battery", '/Game/PatchDLC/Indigo2/Gear/Melee/_Shared/_Unique/SaltnBattery/Balance/Balance_M_SaltnBatt', 'Blunt'),
        ("Slammin' Salmon", '/Game/Gear/Melee/Blunts/_Shared/_Design/_Unique/Fish/Balance_M_Blunt_Fish', 'Blunt'),
        ("Smith's Pick", '/Game/Gear/Melee/Axes/_Shared/_Design/_Unique/SmithCharade/Balance/Balance_M_Axe_SmithCharade_MissionWeapon', 'Axe'),
        ("Snake Stick", '/Game/Gear/Melee/Axes/_Shared/_Design/_Unique/SnakeStick/Balance_M_Axe_SnakeStick', 'Axe'),
        ("Spellblade", '/Game/Gear/Melee/Swords/_Shared/_Design/_Unique/SpellBlade/Balance_M_Sword_SpellBlade', 'Sword'),
        ("Storm Surge", '/Game/Gear/Melee/Swords_2H/_Shared/_Design/_Unique/Tidesorrow_leg/Balance/Balance_M_Sword_Tidesorrow_Leg', 'Sword2H'),
        ("Sword of the Skeleton King", '/Game/Gear/Melee/Swords/_Shared/_Design/_Unique/IntroMission/Balance/Balance_M_Sword_IntroMission_SkellySword', 'Sword'),
        ("Tidesorrow, Lament of the Seas", '/Game/Gear/Melee/Swords_2H/_Shared/_Design/_Unique/Tidesorrow/Balance/Balance_M_Sword_Tidesorrow', 'Sword2H'),
        ("Twin Soul", '/Game/Gear/Melee/Swords/_Shared/_Design/_Unique/TwinSoul/Balance_M_Sword_TwinSoul', 'Sword'),
        ("Wailing Banshee", '/Game/Gear/Melee/Swords_2H/_Shared/_Design/_Unique/BansheeClaw_leg/Balance_M_Sword2H_BansheeClaw_Leg', 'Sword2H'),
        ]:
    melee_balances.append((
        label,
        transforms.get(melee_type.lower(), melee_type),
        'Named Melee',
        balance_name,
        ))

# Wards
ward_balances = []
glob_pattern = '/Game/Gear/Shields/_Design/InvBalance/InvBalD_Shield_*_*_*'
pat = re.compile(r'^/Game/Gear/Shields/_Design/InvBalance/InvBalD_Shield_(?P<manufacturer>.*?)_(?P<rarity>\d+_.*?)$')
for obj_name in data.glob(glob_pattern):
    match = pat.match(obj_name).groupdict()
    rarity_lower = match['rarity'].lower()
    if rarity_lower == '01_common':
        rarity = '01/Common'
    elif rarity_lower == '02_uncommon':
        rarity = '02/Uncommon'
    elif rarity_lower == '03_rare':
        rarity = '03/Rare'
    elif rarity_lower == '04_veryrare':
        rarity = '04/Very Rare'
    else:
        raise Exception('Unknown rarity in {}, {}'.format(obj_name, rarity_lower))
    ward_balances.append((
        transforms.get(match['manufacturer'].lower(), match['manufacturer']),
        'Ward',
        rarity,
        obj_name,
        ))
ward_balances.sort()
for (wname, wobj) in [
        ("(unknown - Vamp)", '/Game/Gear/Shields/_Design/_Uniques/Vamp/Balance/InvBalD_Shield_Legendary_Vamp'),
        ("Afterburner", '/Game/Gear/Shields/_Design/_Uniques/Afterburner/Balance/InvBalD_Shield_Afterburner'),
        ("Ancient Deity", '/Game/Gear/Shields/_Design/_Uniques/AncientDeity/Balance/InvBalD_Shield_AncientDeity'),
        ("Bad Egg", '/Game/Gear/Shields/_Design/_Uniques/BadEgg/Balance/InvBalD_Shield_BadEgg'),
        ("Body Rune", '/Game/Gear/Shields/_Design/_Uniques/Rune_Body/Balance/InvBalD_Shield_Rune_Body'),
        ("Bronco Buster", '/Game/Gear/Shields/_Design/_Uniques/BroncoBuster/Balance/InvBalD_Shield_BroncoBuster'),
        ("Counterfeint", '/Game/PatchDLC/Indigo1/Gear/Wards/_Design/_Unique/Counterfeint/Balance/InvBalD_Shield_Counterfeint'),
        ("Crying Apple", '/Game/Gear/Shields/_Design/_Uniques/_MissionUniques/CryingApple/Balance/InvBalD_Shield_CryingApple'),
        ("Cursed Wit", '/Game/Gear/Shields/_Design/_Uniques/CursedWit/Balance/InvBalD_Shield_CursedWit'),
        ("Dusa's Visage", '/Game/Gear/Shields/_Design/_Uniques/_MissionUniques/TwistedSisters/Balance/InvBalD_Shield_TwistedSisters'),
        ("Full Battery", '/Game/Gear/Shields/_Design/_Uniques/FullBattery/Balance/InvBalD_Shield_FullBattery'),
        ("Hammer and Anvil", '/Game/Gear/Shields/_Design/_Uniques/HammerAnvil/Balance/InvBalD_Shield_HammerAnvil'),
        ("High Tolerance", '/Game/Gear/Shields/_Design/_Uniques/_MissionUniques/ElementalAlements/Balance/InvBalD_Shield_ElementalAlements'),
        ("Kinetic Friction", '/Game/Gear/Shields/_Design/_Uniques/KineticFriction_Health/Balance/InvBalD_Shield_KineticFriction_Health'),
        ("Last Gasp", '/Game/Gear/Shields/_Design/_Uniques/LastGasp/Balance/InvBalD_Shield_LastGasp'),
        ("Lich's Augur", '/Game/PatchDLC/Indigo2/Gear/Wards/_Design/_Unique/LichsAugur/Balance/InvBalD_Shield_LichsAugur'),
        ("Maced Wardu", '/Game/Gear/Shields/_Design/_Uniques/MacedWard/Balance/InvBalD_Shield_MacedWard'),
        ("Master Rune", '/Game/Gear/Shields/_Design/_Uniques/Rune_Master/Balance/InvBalD_Shield_Rune_Master'),
        ("Mind Rune", '/Game/Gear/Shields/_Design/_Uniques/Rune_Mind/Balance/InvBalD_Shield_Rune_Mind'),
        ("Rivote's Shield", '/Game/Gear/Shields/_Design/_Uniques/_MissionUniques/RonRivote/Balance/InvBalD_Shield_RonRivote'),
        ("Shamwai", '/Game/Gear/Shields/_Design/_Uniques/Shamwai/Balance/InvBalD_Shield_Shamwai'),
        ("Spirit Rune", '/Game/Gear/Shields/_Design/_Uniques/Rune_Spirit/Balance/InvBalD_Shield_SpiritRune'),
        ("Static Charge", '/Game/Gear/Shields/_Design/_Uniques/KineticFriction_Shield/Balance/InvBalD_Shield_KineticFriction_Shield'),
        ("Sweet Dreams", '/Game/Gear/Shields/_Design/_Uniques/_MissionUniques/PowerNap/Balance/InvBalD_Shield_PowerNap'),
        ("Transistor", '/Game/Gear/Shields/_Design/_Uniques/Transistor/Balance/InvBalD_Shield_Transistor'),
        ("Trick Mirror", '/Game/Gear/Shields/_Design/_Uniques/TrickMirror/Balance/InvBalD_Shield_TrickMirror'),
        ("Undead Pact", '/Game/Gear/Shields/_Design/_Uniques/UndeadPact/Balance/InvBalD_Shield_UndeadPAct'),
        ]:
    ward_balances.append((wname, 'Ward', 'Named Ward', wobj))

# Spells
# Bit silly to be globbing since there's literally only one balance per rarity, but
# I'd copied this from a BL3 stanza and it'd be more work *not* to do it, at this point.
spell_balances = []
glob_pattern = '/Game/Gear/SpellMods/*Shared/*Design/*Balance/Balance*'
pat = re.compile(r'^/Game/Gear/SpellMods/.*Shared/.*Design/.*Balance/Balance.*_(?P<rarity>\d+_.*?)$')
for obj_name in data.glob(glob_pattern):
    match = pat.match(obj_name).groupdict()
    rarity_lower = match['rarity'].lower()
    if rarity_lower == '01_common':
        rarity = '01/Common'
    elif rarity_lower == '02_uncommon':
        rarity = '02/Uncommon'
    elif rarity_lower == '03_rare':
        rarity = '03/Rare'
    elif rarity_lower == '04_veryrare':
        rarity = '04/Very Rare'
    else:
        raise Exception('Unknown rarity in {}, {}'.format(obj_name, rarity_lower))
    spell_balances.append((
        'Generic',
        'Spell',
        rarity,
        obj_name,
        ))
spell_balances.sort()
for (sname, sobj) in [
        ("Arc Torrent (mission v1)", '/Game/Gear/SpellMods/_Unique/_MissionUniques/AncientPowers/Balance/Balance_Spell_AncientPowers_v1'),
        ("Arc Torrent (mission v2)", '/Game/Gear/SpellMods/_Unique/_MissionUniques/AncientPowers/Balance/Balance_Spell_AncientPowers_v2'),
        ("Arc Torrent (mission v3)", '/Game/Gear/SpellMods/_Unique/_MissionUniques/AncientPowers/Balance/Balance_Spell_AncientPowers_v3'),
        ("Arcane Bolt", '/Game/Gear/SpellMods/_Unique/ArcaneBolt/Balance/Balance_Spell_ArcaneBolt'),
        ("Barrelmaker", '/Game/Gear/SpellMods/_Unique/Barrelmaker/Balance/Balance_Spell_Barrelmaker'),
        ("Boltlash", '/Game/PatchDLC/Indigo2/Gear/SpellMods/_Unique/Boltlash/Balance/Balance_Spell_Boltlash'),
        ("Buffmeister", '/Game/Gear/SpellMods/_Unique/Buffmeister/Balance/Balance_Spell_Buffmeister'),
        ("Dazzler", '/Game/Gear/SpellMods/_Unique/Dazzler/Balance/Balance_Spell_Dazzler'),
        ("Dynamo", '/Game/PatchDLC/Indigo1/Gear/SpellMods/_Unique/Dynamo/Balance/Balance_Spell_Dynamo'),
        ("Elemental Blast (mission)", '/Game/Gear/SpellMods/_Unique/_MissionUniques/FirstDarkSpell/Balance_Spell_FirstDark'),
        ("Flaming Spell", '/Game/Gear/SpellMods/_Unique/_MissionUniques/LittleBluePill/Balance/Balance_Spell_LittleBluePill'), # Other name "Elemental Blast"
        ("Frostburn", '/Game/Gear/SpellMods/_Unique/_MissionUniques/Frostburn/Balance/Balance_Spell_Frostburn'), # Other possible name "Sigil"
        ("Frozen Orb", '/Game/Gear/SpellMods/_Unique/FrozenOrb/Balance/Balance_Spell_FrozenOrb'),
        ("Garlic Breath", '/Game/PatchDLC/Indigo2/Gear/SpellMods/_Unique/GarlicBreath/Balance/Balance_Spell_GarlicBreath'),
        ("Gelatinous Cube", '/Game/Gear/SpellMods/_Unique/GelSphere/Balance/Balance_Spell_GelSphere'),
        ("Glacial Cascade", '/Game/Gear/SpellMods/_Unique/GlacialCascade/Balance/Balance_Spell_GlacialCascade'),
        ("Great Wake", '/Game/Gear/SpellMods/_Unique/_MissionUniques/JaggedToothCrew/Balance/Balance_Spell_JaggedTooth'), # Other name "Sunder"
        ("Greatest Spell Ever", '/Game/Gear/SpellMods/_Unique/_MissionUniques/LavaGoodTime/Balance/Balance_Spell_LavaGoodTime'), # Other name "Eruption"
        ("Hellfire", '/Game/Gear/SpellMods/_Unique/_MissionUniques/DestructionRains/Balance/Balance_Spell_DestructionRains'), # Other possible name "Calamity"
        ("Holey Spell-nade", '/Game/Gear/SpellMods/_Unique/_MissionUniques/HoleyHandGrenade/Balance/Balance_Spell_HoleyHandGrenade'), # Other name "Elemental Blast"
        ("Ice Spike", '/Game/Gear/SpellMods/IceSpike/_Shared/_Design/_Unique/FirstSpell/Balance_S_IceSpike_FirstSpell'),
        ("Inflammation", '/Game/Gear/SpellMods/_Unique/Inflammation/Balance/Balance_Spell_Inflammation'),
        ("Laserhand", '/Game/Gear/SpellMods/_Unique/Laserhand/Balance/Balance_Spell_Laserhand'),
        ("Lovestruck Beau", '/Game/PatchDLC/Indigo3/Gear/SpellMods/_Unique/InstantAmbush/Balance/Balance_Spell_InstantAmbush'),
        ("Magic Barrage (intro mission)", '/Game/Gear/SpellMods/MagicMissile/_Shared/_Design/_Unique/Balance_Spell_MagicMissile_IntroMission'),
        ("Marshmallow", '/Game/Gear/SpellMods/_Unique/Marshmellow/Balance/Balance_Spell_Marshmellow'),
        ("Rainbolt", '/Game/PatchDLC/Indigo1/Gear/SpellMods/_Unique/Rainbolt/Balance/Balance_Spell_Rainbolt'),
        ("Reviver", '/Game/Gear/SpellMods/_Unique/Reviver/Balance/Balance_Spell_Reviver'),
        ("Sawblades", '/Game/Gear/SpellMods/_Unique/Sawblades/Balance/Balance_Spell_Sawblades'),
        ("Skullantir", '/Game/Gear/SpellMods/_Unique/Watcher/Balance/Balance_Spell_Watcher'),
        ("Smithy's Ire", '/Game/PatchDLC/Indigo3/Gear/SpellMods/_Unique/IllmarinensWrath/Balance/Balance_Spell_IllWrath'),
        ("Sunder (mission)", '/Game/Gear/SpellMods/_Unique/_MissionUniques/Plot02GraveyardReward/Balance_Plot02_Graveyard_FissureSpell'),
        ("Threads of Fate", '/Game/Gear/SpellMods/_Unique/ThreadOfFate/Balance/Balance_Spell_ThreadOfFate'),
        ("Tidebreaker", '/Game/PatchDLC/Indigo1/Gear/SpellMods/_Unique/Tidebreaker/Balance/Balance_Spell_Tidebreaker'),
        ("Time Skip", '/Game/Gear/SpellMods/_Unique/TimeSkip/Balance/Balance_Spell_TimeSkip'),
        ("Twister", '/Game/Gear/SpellMods/_Unique/Twister/Balance/Balance_Spell_Twister'),
        ]:
    spell_balances.append((sname, 'Spell', 'Named Spell', sobj))

# Armor
armor_balances = []
# There are also some balances in /Game/Gear/Pauldrons/_Shared/_Design/Balance/TESTDEFSONLY,
# but I figure I'll ignore those.  It's also a bit silly to be globbing when there's literally
# only one balance per rarity, but I'd copied this from a BL3 stanza and it's more work to
# *not* do it, at this point.
glob_pattern = '/Game/Gear/Pauldrons/_Shared/_Design/Balance/Balance_Armor_*'
pat = re.compile(r'^/Game/Gear/Pauldrons/_Shared/_Design/Balance/Balance_Armor_(?P<rarity>\d+_.*?)$')
for obj_name in data.glob(glob_pattern):
    match = pat.match(obj_name).groupdict()
    rarity_lower = match['rarity'].lower()
    if rarity_lower == '01_common':
        rarity = '01/Common'
    elif rarity_lower == '02_uncommon':
        rarity = '02/Uncommon'
    elif rarity_lower == '03_rare':
        rarity = '03/Rare'
    elif rarity_lower == '04_veryrare':
        rarity = '04/Very Rare'
    else:
        raise Exception('Unknown rarity in {}, {}'.format(obj_name, rarity_lower))
    armor_balances.append((
        'Generic',
        'Armor',
        rarity,
        obj_name,
        ))
armor_balances.sort()
for (aname, aobj) in [
        ("Amalgam", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/Amalgam/Balance/Balance_Armor_Amalgam'),
        ("Armor That Sucks (Brr-Zerker)", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/ArmorThatSucks/Balance/Balance_Armor_ArmorThatSucks_Barb'),
        ("Armor That Sucks (Clawbringer)", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/ArmorThatSucks/Balance/Balance_Armor_ArmorThatSucks_Knight'),
        ("Armor That Sucks (Graveborn)", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/ArmorThatSucks/Balance/Balance_Armor_ArmorThatSucks_Necro'),
        ("Armor That Sucks (Spellshot)", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/ArmorThatSucks/Balance/Balance_Armor_ArmorThatSucks_Mage'),
        ("Armor That Sucks (Spore Warden)", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/ArmorThatSucks/Balance/Balance_Armor_ArmorThatSucks_Ranger'),
        ("Armor That Sucks (Stabbomancer)", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/ArmorThatSucks/Balance/Balance_Armor_ArmorThatSucks_Rogue'),
        ("Big B Mittens", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/BigBMittens/Balance/Balance_Armor_BigBMittens'),
        ("Blank Slate", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/Tabula/Balance/Balance_Armor_Tabula'),
        ("Calamity", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/Calamity/Balance/Balance_Armor_Calamity'),
        ("Cape of Tides", '/Game/PatchDLC/Indigo1/Gear/Pauldrons/_Shared/_Design/_Unique/CapeOfTides/Balance/Balance_Armor_CapeOfTides'),
        ("Claw", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/Claw/Balance/Balance_Armor_MantisClaw'), # Prefixes: Mantis / Scarlet / Storm / Tiger / Turquoise
        ("Corrupted Platemail", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/CorruptedPlatemail/Balance/Balance_Armor_CorruptedPlatemail'),
        ("Deathless Mantle", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/DeathlessMantle/Balance/Balance_Armor_DeathlessMantle'),
        ("Diamond Gauntlets", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/DiamondGauntlets/Balance/Balance_Armor_DiamondGauntlets'),
        ("Head of the Snake", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/HeadOfTheSnake/Balance/Balance_Armor_HeadOfTheSnake'),
        ("Miasmic Mail", '/Game/PatchDLC/Indigo2/Gear/Pauldrons/_Shared/_Design/_Unique/MiasmaChain/Balance/Balance_Armor_MiasmaChain'),
        ("Pandemecium", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/Pandemecium/Balance/Balance_Armor_Pandemecium'),
        ("Selective Amnesia", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/SelectiveAmnesia/Balance/Balance_Armor_SelectiveAmnesia'),
        ("Smart Armor", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/SmartArmor/Balance/Balance_Armor_SmartArmor'),
        ("Steel Gauntlets", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/SteelGauntlets/Balance/Balance_Armor_SteelGauntlets'),
        ("Tyrant's Truth", '/Game/PatchDLC/Indigo3/Gear/Pauldrons/_Shared/_Design/_Unique/Ascetic/Balance/Balance_Armor_05_Ascetic'),
        ("Warped Paradigm", '/Game/Gear/Pauldrons/_Shared/_Design/_Uniques/Bladesinger/Balance/Balance_Armor_Bladesinger'),
        ]:
    armor_balances.append((aname, 'Armor', 'Named Armor', aobj))

# Rings
ring_balances = [
        ('Generic', 'Ring', '01/Common', '/Game/Gear/Rings/_Shared/Design/BalanceD/Balance_Rings_01_Common'),
        ('Generic', 'Ring', '02/Uncommon', '/Game/Gear/Rings/_Shared/Design/BalanceD/Balance_Rings_02_Uncommon'),
        ('Generic', 'Ring', '03/Rare', '/Game/Gear/Rings/_Shared/Design/BalanceD/Balance_Rings_03_Rare'),
        ('Generic', 'Ring', '04/Very Rare', '/Game/Gear/Rings/_Shared/Design/BalanceD/Balance_Rings_04_VeryRare'),
        ]
for (rname, robj) in [
        ("Championship Ring", '/Game/Gear/Rings/_Shared/_Unique/Cond_Boss/Balance_R_Boss'),
        ("Class Ring", '/Game/Gear/Rings/_Shared/_Unique/Cond_SkillCooldown/Balance_R_SkillCooldown'),
        ("Driftwood", '/Game/Gear/Rings/_Shared/_Unique/DriftwoodRing/Balance_Rings_DriftwoodRing'),
        ("Elder Wyvern's Ring", '/Game/Gear/Rings/_Shared/_Unique/ElderWyvern/Balance/Balance_Ring_ElderWyvern'),
        ("Finger Ward", '/Game/Gear/Rings/_Shared/_Unique/Cond_FullShield/Balance_R_FullShield'),
        ("Fingertip Pulse Oximeter", '/Game/Gear/Rings/_Shared/_Unique/Cond_LowHealth/Balance_R_LowHealth'),
        ("Insight Ring", '/Game/Gear/Rings/_Shared/_Unique/InsightRing/Balance/Balance_Rings_InsightRing'),
        ("Lethal Catch", '/Game/PatchDLC/Indigo1/Gear/Rings/_Shared/_Unique/LethalCatch/Balance/Balance_Ring_LethalCatch'),
        ("Mood Ring", '/Game/Gear/Rings/_Shared/_Unique/Cond_LowShield/Balance_R_LowShield'),
        ("Precious Jamstone", '/Game/PatchDLC/Indigo2/Gear/Rings/_Shared/_Unique/PreciousJamstone/Balance/Balance_Ring_Jamstone'),
        ("Promise Ring", '/Game/Gear/Rings/_Shared/_Unique/Cond_SkillReady/Balance_R_SkillReady'),
        ("Sharklescent Ring", '/Game/Gear/Rings/_Shared/_Unique/Sharklescent/Balance/Balance_Ring_Sharklescent'),
        ("Sharksbane", '/Game/PatchDLC/Indigo1/Gear/Rings/_Shared/_Unique/SharkBane/Balance/Balance_Ring_SharkBane'),
        ("Shell Casing Ring", '/Game/Gear/Rings/_Shared/_Unique/Cond_LowAmmo/Balance_R_LowAmmo'),
        ("Silicone Ring", '/Game/Gear/Rings/_Shared/_Unique/Cond_Healthy/Balance_R_Healthy'),
        ("Thumb Cuffs", '/Game/Gear/Rings/_Shared/_Unique/Cond_Dungeon/Balance_R_Dungeon'),
        ]:
    ring_balances.append((
        rname,
        'Ring',
        'Named Ring',
        robj,
        ))

# Amulets
amulet_balances = [
        ('Generic', 'Amulet', '01/Common', '/Game/Gear/Amulets/_Shared/_Design/Balance/Balance_Amulets_01_Common'),
        ('Generic', 'Amulet', '02/Uncommon', '/Game/Gear/Amulets/_Shared/_Design/Balance/Balance_Amulets_02_Uncommon'),
        ('Generic', 'Amulet', '03/Rare', '/Game/Gear/Amulets/_Shared/_Design/Balance/Balance_Amulets_03_Rare'),
        ('Generic', 'Amulet', '04/Very Rare', '/Game/Gear/Amulets/_Shared/_Design/Balance/Balance_Amulets_04_VeryRare'),
        ]
for (aname, aobj) in [
        ("Barboload", '/Game/PatchDLC/Indigo2/Gear/Amulets/_Shared/_Unique/Barboload/Balance/Balance_Amulet_Unique_Barboload'),
        ("Blaze Of Glory", '/Game/Gear/Amulets/_Shared/_Unique/BlazeOfGlory/Balance/Balance_Amulet_Unique_BlazeOfGlory'),
        ("Bradluck", '/Game/Gear/Amulets/_Shared/_Unique/Bradluck/Balance/Balance_Amulet_Unique_Bradluck'),
        ("Frenzied Wrath", '/Game/Gear/Amulets/_Shared/_Unique/Frenzied/Balance/Balance_Amulet_Unique_Frenzied'),
        ("Harbinger", '/Game/Gear/Amulets/_Shared/_Unique/Harbinger/Balance/Balance_Amulet_Unique_Harbinger'),
        ("Harmonious Dingledangle (Brr-Zerker)", '/Game/Gear/Amulets/_Shared/_Unique/HarmoniousDingleDangle/Balance/Balance_Amulet_Unique_Plot05_HDD_Barb'),
        ("Harmonious Dingledangle (Clawbringer)", '/Game/Gear/Amulets/_Shared/_Unique/HarmoniousDingleDangle/Balance/Balance_Amulet_Unique_Plot05_HDD_KotC'),
        ("Harmonious Dingledangle (Graveborn)", '/Game/Gear/Amulets/_Shared/_Unique/HarmoniousDingleDangle/Balance/Balance_Amulet_Unique_Plot05_HDD_Necro'),
        ("Harmonious Dingledangle (Spellshot)", '/Game/Gear/Amulets/_Shared/_Unique/HarmoniousDingleDangle/Balance/Balance_Amulet_Unique_Plot05_HDD_GunMage'),
        ("Harmonious Dingledangle (Spore Warden)", '/Game/Gear/Amulets/_Shared/_Unique/HarmoniousDingleDangle/Balance/Balance_Amulet_Unique_Plot05_HDD_Ranger'),
        ("Harmonious Dingledangle (Stabbomancer)", '/Game/Gear/Amulets/_Shared/_Unique/HarmoniousDingleDangle/Balance/Balance_Amulet_Unique_Plot05_HDD_Rogue'),
        ("Joint Training", '/Game/Gear/Amulets/_Shared/_Unique/JointTraining/Balance/Balance_Amulet_Unique_JointTraining'),
        ("Overflow Bloodbag", '/Game/Gear/Amulets/_Shared/_Unique/OverflowBloodbag/Balance_Amulets_OverflowBloodbag'),
        ("Rivote's Amulet", '/Game/Gear/Amulets/_Shared/_Unique/RonRivote/Balance/Balance_Amulet_Unique_RonRivote'),
        ("Sacrificial Skeep", '/Game/Gear/Amulets/_Shared/_Unique/SacSkeep/Balance_Amulets_SacSkeep'),
        ("Slip 'n' Stun", '/Game/PatchDLC/Indigo1/Gear/Amulets/_Shared/_Unique/SlipnStun/Balance/Balance_Amulet_Unique_SlipnStun'),
        ("The Protagonizer", '/Game/PatchDLC/Indigo3/Gear/Amulets/_Shared/_Unique/PracticalFocus/Balance/Balance_Amulet_Unique_PracticalFocus'),
        ("Theurge", '/Game/Gear/Amulets/_Shared/_Unique/Theruge/Balance/Balance_Amulet_Unique_Theruge'),
        ("Universal Soldier", '/Game/Gear/Amulets/_Shared/_Unique/UniversalSoldier/Balance/Balance_Amulet_Unique_UniversalSoldier'),
        ("Vorcanar's Cog", '/Game/Gear/Amulets/_Shared/_Unique/GTFO/Balance/Balance_Amulet_Unique_GTFO'),
        ]:
    amulet_balances.append((
        aname,
        'Amulet',
        'Named Amulet',
        aobj,
        ))

# BL3 disabled some anointments via a compiled-in hotfix, so we had to hardcode a
# list of anointments which never get rolled.  WL doesn't have that problem (yet),
# but we'll leave the var here anyway, just in case.
anointment_exclusions = {
        }

# Loop through
for (sheet_label, filename, balances, man_col_name, type_col_name, do_anoints, anoint_expansions) in [
        ('Guns', 'gun_counts.csv', gun_balances, 'Manufacturer/Name', 'Gun Type', False, []),
        ('Melee', 'melee_counts.csv', melee_balances, 'Type/Name', 'Melee Type', False, []),
        ('Wards', 'ward_counts.csv', ward_balances, 'Manufacturer/Name', None, False, []),
        ('Spells', 'spell_counts.csv', spell_balances, 'Type/Name', None, False, []),
        # Armor in WL is worse than COMs were in BL3.  The purple armor balance takes (at least) longer than 4hr for me
        #('Armor', 'armor_counts.csv', armor_balances, 'Type/Name', None, False, []),
        ('Rings', 'ring_counts.csv', ring_balances, 'Type/Name', None, False, []),
        ('Amulets', 'amulet_counts.csv', amulet_balances, 'Type/Name', None, False, []),
        ]:

    # Create a struct which defines how many extra anointments, beyond the ones already
    # defined, that various balances will receive from part expansions (so far there's
    # only been one "permanent" addition to this, added w/ Maliwan Takedown)
    anointment_additions = {}
    if do_anoints and anoint_expansions:
        for expansion_obj in anoint_expansions:
            # Don't bother error checking on this, just do it.
            exp = data.get_exports(expansion_obj, 'InventoryGenericPartExpansionData')[0]
            num_parts = 0
            for part in exp['GenericParts']['Parts']:
                if part['PartData'][1] not in anointment_exclusions:
                    num_parts += 1
            #num_parts = len(exp['GenericParts']['Parts'])

            # Grab a list of balance collections which define the gear this expansion will act on.
            # We need to use the refs database to find out what's using the main one as a
            # ParentCollection.
            bal_collections = [exp['InventoryBalanceCollection'][1]]
            for (extra, extra_data) in data.get_refs_to_data(bal_collections[0]):
                if extra_data \
                        and extra_data[0]['export_type'] == 'InventoryBalanceCollectionData' \
                        and extra_data[0]['ParentCollection'][1] == bal_collections[0]:
                    bal_collections.append(extra)

            # Create a set() of balances which apply; we have one current example (the AutoAimè)
            # which is specified more than once (inside the same collection, no less), so this
            # way we'll avoid processing them more than once per anointment expansion.
            bal_set = set()
            for bal_collection in bal_collections:
                # Ditto re: errors
                collection = data.get_exports(bal_collection, 'InventoryBalanceCollectionData')[0]
                if 'InventoryBalanceList' in collection:
                    for bal in collection['InventoryBalanceList']:
                        bal_set.add(bal['asset_path_name'].split('.')[0])

            # Now loop through and add in extra parts.
            for bal_name in bal_set:
                if bal_name in anointment_additions:
                    anointment_additions[bal_name] += num_parts
                else:
                    anointment_additions[bal_name] = num_parts

    # Now start processing
    total_count = 0
    total_count_anoint = 0
    print('Processing {}'.format(filename))
    with open(filename, 'w') as odf:

        writer = csv.writer(odf)
        header = [man_col_name]
        if type_col_name:
            header.append(type_col_name)
        header.extend([
            'Rarity',
            'Balance',
            'Count',
            ])
        if do_anoints:
            header.append('Count With Anoints')
        writer.writerow(header)

        for manufacturer, gun_type, rarity, obj_name in balances:

            print('Processing {} {} {} ({})'.format(manufacturer, gun_type, rarity, obj_name))
            bal = BalanceTree(obj_name, data)
            total_count += bal.gun_count()
            if do_anoints:
                total_count_anoint += bal.gun_count(anointment_additions, anointment_exclusions)
                print('  -> {:,} ({:,} with anoints)'.format(bal.gun_count(), bal.gun_count(anointment_additions, anointment_exclusions)))
            else:
                print('  -> {:,}'.format(bal.gun_count()))

            datarow = [manufacturer]
            if type_col_name:
                datarow.append(gun_type)
            datarow.extend([
                rarity,
                obj_name,
                bal.gun_count(),
                ])
            if do_anoints:
                datarow.append(bal.gun_count(anointment_additions, anointment_exclusions))
            writer.writerow(datarow)

            bal = None

        footer_row = ['Total']
        if type_col_name:
            footer_row.append('')
        footer_row.extend([
            '',
            '',
            total_count,
            ])
        if do_anoints:
            footer_row.append(total_count_anoint)
        writer.writerow(footer_row)
        print('')
        if do_anoints:
            print('Total: {} ({} with anoints)'.format(total_count, total_count_anoint))
        else:
            print('Total: {}'.format(total_count))
        print('...done!')

